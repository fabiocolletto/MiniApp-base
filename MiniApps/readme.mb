# Guia de contribuição para MiniApps

## Estrutura recomendada
- Crie um subdiretório próprio para cada MiniApp dentro de `MiniApps/`, usando nomes descritivos em `kebab-case`.
- Dentro do diretório do MiniApp, organize o código em subpastas padronizadas:
  - `src/` para componentes, controladores e integrações específicas do MiniApp.
  - `ui/` para templates HTML, fragmentos ou widgets isolados quando aplicável.
  - `styles/` para folhas de estilo locais, reaproveitando tokens globais e utilitários existentes.
  - `tests/` para suites automatizadas (unitárias, integração e end-to-end quando necessário).
  - `docs/` para especificações funcionais, guias de QA e referências de design.
  - `assets/` apenas quando indispensável; prefira compartilhar materiais por meio de utilitários globais.
- Utilize arquivos sentinelas (`.gitkeep`) em pastas vazias que precisem ser versionadas.

### Conteúdo mínimo em cada MiniApp
- `README.md` descrevendo propósito, status do desenvolvimento, dependências e passos de build/teste.
- `CHANGELOG.md` ou `log.md` local registrando as entregas específicas do MiniApp, alinhado ao `Log.md` principal.
- Scripts de seed ou mocks quando o MiniApp depender de dados específicos; armazene-os em `src/seeds/` ou `tests/fixtures/`.
- Testes automatizados cobrindo fluxos críticos com comandos para execução local e em CI.

## Fluxo de integração
- Registre no `Log.md` principal qualquer planejamento ou execução antes de iniciar ajustes significativos.
- Ao publicar ou atualizar um MiniApp, sincronize os catálogos e painéis que o referenciam (`scripts/data/miniapp-store.js`,
  `scripts/views/miniapp-store.js`, stores ou seeds relacionados) e ajuste os testes (`tests/miniapp-store-data.test.js`) para
  refletir os novos metadados.
- Atualize metadados globais de versão quando a release impactar o aplicativo como um todo, seguindo as diretrizes de `sys/` e
  dos painéis administrativos.

## Boas práticas compartilhadas
- Reaproveite componentes e estilos globais; crie utilitários novos apenas quando forem reaproveitáveis por outros MiniApps.
- Garanta responsividade cobrindo pontos de quebra homologados e valide acessibilidade (ARIA, foco visível, contraste, navegação
  por teclado).
- Prefira dados e stores centralizados antes de introduzir novos contextos ou provedores locais.
- Documente rotinas assíncronas, integrações externas e requisitos de configuração adicional diretamente no `README.md` do
  MiniApp.
- Inclua instruções de QA descrevendo cenários críticos, dados de teste e critérios de aceite quando preparar uma release.

## Manutenção e limpeza
- Mova artefatos obsoletos para `Arquivados/` registrando o motivo no `Log.md` geral e no log local do MiniApp.
- Remova subpastas temporárias após concluir migrações a partir de `temp/`, garantindo que apenas o código final permaneça aqui.
- Utilize PRs com descrições completas, informando impacto nos painéis, nas APIs internas e nas ferramentas auxiliares.

Para dúvidas ou diretrizes adicionais, consulte o `AGENTS.md` na raiz e mantenha o alinhamento com as normas de versionamento e
registro do projeto.
